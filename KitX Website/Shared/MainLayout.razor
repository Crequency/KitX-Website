@inherits LayoutComponentBase
@inject Toolbelt.Blazor.I18nText.I18nText I18nText

<PageTitle>KitX Website</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://docs.catrol.cn/apps/kitx/" target="_blank"
               style="text-decoration: none;">
                <i class="fa-solid fa-book"></i>&nbsp;@Text["Nav_Docs"]&nbsp;
            </a>
            <a href="https://space.bilibili.com/194150723" target="_blank"
               style="text-decoration: none;">
                <i class="fa-brands fa-bilibili"></i>&nbsp;@Text["Nav_BiliBili"]&nbsp;
            </a>
            <a href="https://github.com/Crequency/KitX" target="_blank"
               style="text-decoration: none;">
                <i class="fa-brands fa-github"></i>&nbsp;@Text["Nav_GitHub"]&nbsp;
            </a>
        </div>

        <article class="content px-4">
            @Body
        </article>

        <div class="footer">
            <div class="form-row align-items-center text-muted px-4">
                <div style="float:right;display:flex;flex-direction:row;">
                    <span class="oi oi-globe" aria-hidden="true"
                          style="vertical-align:middle;margin:auto 25px;"></span>
                    <select class="form-control form-control-sm"
                            style="vertical-align:middle;margin:auto -15px;"
                            @onchange="OnChangeCurrentLang">
                        <option value="cn" selected="@(CurrentLang == "cn")">简体中文</option>
                        <option value="en" selected="@(CurrentLang == "en")">English</option>
                    </select>
                </div>
            </div>
        </div>
    </main>
</div>

@code {
    private string? CurrentLang;

    private I18nText.Text Text = new I18nText.Text();

    protected override async Task OnInitializedAsync()
    {
        var lang = await I18nText.GetCurrentLanguageAsync();
        if (new[] { "en", "cn" }.Contains(lang.Split('-')[0]))
        {
            CurrentLang = lang;
        }
        else
        {
            CurrentLang = "en";
        }

        Text = await I18nText.GetTextTableAsync<I18nText.Text>(this);
        I18nText.ChangeLanguage += (s, a) =>
        {
            Console.WriteLine($"Language Changed: {a.LanguageCode}");
        };
    }

    private async Task OnChangeCurrentLang(ChangeEventArgs args)
    {
        Console.WriteLine($"OnChange: {args.Value}");
        CurrentLang = args.Value as string;
        await I18nText.SetCurrentLanguageAsync(CurrentLang);
    }
}

